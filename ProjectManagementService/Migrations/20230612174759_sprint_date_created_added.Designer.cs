// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProjectManagementService.Data;

#nullable disable

namespace ProjectManagementService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20230612174759_sprint_date_created_added")]
    partial class sprint_date_created_added
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.16")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProjectManagementService.Models.Dashboard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<List<Guid>>("AllowedUserRoles")
                        .HasColumnType("uuid[]");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Dashboards");
                });

            modelBuilder.Entity("ProjectManagementService.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("Created")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("ProjectManagementService.Models.ProjectsIdentity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("IdentityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProjectsIdentities");
                });

            modelBuilder.Entity("ProjectManagementService.Models.ProjectsRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("ProjectsRoles");
                });

            modelBuilder.Entity("ProjectManagementService.Models.Sprint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateEnd")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateStart")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool?>("Finished")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("character varying(150)");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Sprints");
                });

            modelBuilder.Entity("ProjectManagementService.Models.StateRelationship", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateCurrent")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateNext")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("StateRelationships");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aab7f93d-feac-43d7-8742-e698111af2ec"),
                            StateCurrent = new Guid("aeb8aaf7-0c48-4806-9840-eb48cccbbdf8"),
                            StateNext = new Guid("c9124443-fab8-4696-a837-ecf7b421f4be")
                        },
                        new
                        {
                            Id = new Guid("c66438b7-bc9e-4ce8-8a4a-24b4ce2d6e03"),
                            StateCurrent = new Guid("eadbc4f9-f1cf-426d-9ca1-06a69b09971c"),
                            StateNext = new Guid("ba5ebabd-89c7-4a3f-b997-ecdb4009a604")
                        },
                        new
                        {
                            Id = new Guid("c52e3ca0-3d16-42e1-98ba-9e4bde539bc5"),
                            StateCurrent = new Guid("eadbc4f9-f1cf-426d-9ca1-06a69b09971c"),
                            StateNext = new Guid("d2ab7572-2359-4698-ae87-14b5955101cf")
                        },
                        new
                        {
                            Id = new Guid("6475ed4c-cb2d-4bd5-ab3c-e5f9f4f8391d"),
                            StateCurrent = new Guid("d2ab7572-2359-4698-ae87-14b5955101cf"),
                            StateNext = new Guid("eadbc4f9-f1cf-426d-9ca1-06a69b09971c")
                        },
                        new
                        {
                            Id = new Guid("a64379ad-7398-4979-8ec1-94c3085f2fd8"),
                            StateCurrent = new Guid("d2ab7572-2359-4698-ae87-14b5955101cf"),
                            StateNext = new Guid("ba5ebabd-89c7-4a3f-b997-ecdb4009a604")
                        },
                        new
                        {
                            Id = new Guid("d4c6c12b-9cb6-441c-b532-d97ff8ad5071"),
                            StateCurrent = new Guid("d31de2b7-103b-45fd-9731-964e7bc0a1ff"),
                            StateNext = new Guid("8981ee9e-e878-4b7a-b2d3-21e586eba814")
                        },
                        new
                        {
                            Id = new Guid("046005b8-90fa-4d7a-abdc-9db422306749"),
                            StateCurrent = new Guid("d31de2b7-103b-45fd-9731-964e7bc0a1ff"),
                            StateNext = new Guid("aeb8aaf7-0c48-4806-9840-eb48cccbbdf8")
                        },
                        new
                        {
                            Id = new Guid("5ab4005c-e2c3-43f4-bfa2-09845c04b863"),
                            StateCurrent = new Guid("d31de2b7-103b-45fd-9731-964e7bc0a1ff"),
                            StateNext = new Guid("c9124443-fab8-4696-a837-ecf7b421f4be")
                        },
                        new
                        {
                            Id = new Guid("159ba830-e998-459d-af2b-97a981878e5e"),
                            StateCurrent = new Guid("ba5ebabd-89c7-4a3f-b997-ecdb4009a604"),
                            StateNext = new Guid("e6bfb790-c086-41b9-aba9-6511fb8e2e17")
                        },
                        new
                        {
                            Id = new Guid("49165ac7-bf14-430a-819f-70e778e8b19d"),
                            StateCurrent = new Guid("c9124443-fab8-4696-a837-ecf7b421f4be"),
                            StateNext = new Guid("d31de2b7-103b-45fd-9731-964e7bc0a1ff")
                        },
                        new
                        {
                            Id = new Guid("3ded1351-3f04-4718-ab9e-0d63f72ab6e5"),
                            StateCurrent = new Guid("c9124443-fab8-4696-a837-ecf7b421f4be"),
                            StateNext = new Guid("aeb8aaf7-0c48-4806-9840-eb48cccbbdf8")
                        },
                        new
                        {
                            Id = new Guid("149679ea-0a4d-4e10-b0b7-feec039e31d2"),
                            StateCurrent = new Guid("8981ee9e-e878-4b7a-b2d3-21e586eba814"),
                            StateNext = new Guid("ba5ebabd-89c7-4a3f-b997-ecdb4009a604")
                        },
                        new
                        {
                            Id = new Guid("461b8dcc-163d-40c3-80a0-a4f956cb2aa7"),
                            StateCurrent = new Guid("8981ee9e-e878-4b7a-b2d3-21e586eba814"),
                            StateNext = new Guid("aeb8aaf7-0c48-4806-9840-eb48cccbbdf8")
                        },
                        new
                        {
                            Id = new Guid("74e27698-dbb5-4d72-8174-4fc1058b1dab"),
                            StateCurrent = new Guid("8981ee9e-e878-4b7a-b2d3-21e586eba814"),
                            StateNext = new Guid("d31de2b7-103b-45fd-9731-964e7bc0a1ff")
                        },
                        new
                        {
                            Id = new Guid("a4dca5f1-ac48-4804-afd4-bc6cf0cae532"),
                            StateCurrent = new Guid("e6bfb790-c086-41b9-aba9-6511fb8e2e17"),
                            StateNext = new Guid("ba5ebabd-89c7-4a3f-b997-ecdb4009a604")
                        },
                        new
                        {
                            Id = new Guid("4ae7d5cc-8a43-46be-9e3f-cc9de6cdba4e"),
                            StateCurrent = new Guid("e6bfb790-c086-41b9-aba9-6511fb8e2e17"),
                            StateNext = new Guid("d2ab7572-2359-4698-ae87-14b5955101cf")
                        },
                        new
                        {
                            Id = new Guid("04d8d714-970a-4623-b77a-fa010e4f1050"),
                            StateCurrent = new Guid("e6bfb790-c086-41b9-aba9-6511fb8e2e17"),
                            StateNext = new Guid("69a34855-ad70-4b86-b2b6-fe801faf0f9f")
                        });
                });

            modelBuilder.Entity("ProjectManagementService.Models.Task", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("CreatorId")
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<int?>("EstimationInPoints")
                        .HasColumnType("integer");

                    b.Property<TimeSpan?>("EstimationInTime")
                        .HasColumnType("interval");

                    b.Property<Guid?>("PerformerId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("StateId")
                        .HasColumnType("uuid");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<Guid>("TypeId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.HasIndex("TypeId");

                    b.ToTable("Tasks");
                });

            modelBuilder.Entity("ProjectManagementService.Models.TaskState", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.Property<int?>("Order")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("TaskStates");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aeb8aaf7-0c48-4806-9840-eb48cccbbdf8"),
                            Name = "Анализ",
                            Order = 0
                        },
                        new
                        {
                            Id = new Guid("eadbc4f9-f1cf-426d-9ca1-06a69b09971c"),
                            Name = "Доработка",
                            Order = 7
                        },
                        new
                        {
                            Id = new Guid("69a34855-ad70-4b86-b2b6-fe801faf0f9f"),
                            Name = "Завершено",
                            Order = 8
                        },
                        new
                        {
                            Id = new Guid("d2ab7572-2359-4698-ae87-14b5955101cf"),
                            Name = "К доработке",
                            Order = 6
                        },
                        new
                        {
                            Id = new Guid("d31de2b7-103b-45fd-9731-964e7bc0a1ff"),
                            Name = "К работе",
                            Order = 2
                        },
                        new
                        {
                            Id = new Guid("ba5ebabd-89c7-4a3f-b997-ecdb4009a604"),
                            Name = "К тестированию",
                            Order = 4
                        },
                        new
                        {
                            Id = new Guid("c9124443-fab8-4696-a837-ecf7b421f4be"),
                            Name = "Оценка",
                            Order = 1
                        },
                        new
                        {
                            Id = new Guid("8981ee9e-e878-4b7a-b2d3-21e586eba814"),
                            Name = "Работа",
                            Order = 3
                        },
                        new
                        {
                            Id = new Guid("e6bfb790-c086-41b9-aba9-6511fb8e2e17"),
                            Name = "Тестирование",
                            Order = 5
                        });
                });

            modelBuilder.Entity("ProjectManagementService.Models.TaskType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("TaskTypes");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dc9b0e23-5c4a-40fb-83ec-691bcd405a83"),
                            Name = "Задача"
                        },
                        new
                        {
                            Id = new Guid("1738a748-d9f2-4a92-8010-d69b9fb7fd67"),
                            Name = "Ошибка"
                        },
                        new
                        {
                            Id = new Guid("30755127-b34c-4b6f-9e44-57fbd8306bbc"),
                            Name = "Пользовательская история"
                        },
                        new
                        {
                            Id = new Guid("460509ef-ce6d-4b4d-a3cf-1c2161fe4e5e"),
                            Name = "Прочее"
                        });
                });

            modelBuilder.Entity("ProjectManagementService.Models.UserRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(40)
                        .HasColumnType("character varying(40)");

                    b.HasKey("Id");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ef7d3fc3-611f-46b0-98fd-5bf8e1005dec"),
                            Name = "Админ"
                        },
                        new
                        {
                            Id = new Guid("b68e2f0d-c7e8-4ba2-b5ff-093ac717cb9d"),
                            Name = "Стандартный"
                        });
                });

            modelBuilder.Entity("ProjectManagementService.Models.UserStory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Importance")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("ProjectId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SprintId")
                        .HasColumnType("uuid");

                    b.Property<int>("State")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SprintId");

                    b.ToTable("UserStories");
                });

            modelBuilder.Entity("ProjectManagementService.Models.Dashboard", b =>
                {
                    b.HasOne("ProjectManagementService.Models.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ProjectManagementService.Models.Task", b =>
                {
                    b.HasOne("ProjectManagementService.Models.TaskState", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProjectManagementService.Models.TaskType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("ProjectManagementService.Models.UserStory", b =>
                {
                    b.HasOne("ProjectManagementService.Models.Sprint", "Sprint")
                        .WithMany()
                        .HasForeignKey("SprintId");

                    b.Navigation("Sprint");
                });
#pragma warning restore 612, 618
        }
    }
}
